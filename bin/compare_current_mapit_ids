#!/usr/bin/perl -w
#
# A one-off script to compare the ID numbers and names of the current
# mapit database and the new one. Various other databases we have store
# the mapit IDs, so let's just make the new database have the same IDs
# for ease of transition. They're just numbers.

use strict;
use DBI;
use FindBin;
use lib "$FindBin::Bin/../commonlib/perllib";

use mySociety::Config;
mySociety::Config::set_file("$FindBin::Bin/../conf/general");

my $mapit_old = connect_to_mapit_database('mapit', 'cake');
my $mapit_new = connect_to_mapit_database('mapit-new', 'bitter');

my $sth = $mapit_old->prepare("SELECT country, area.type, name, area.id, ons_code, unit_id, generation_high
    FROM area
        LEFT JOIN area_name ON area.id=area_name.area_id AND name_type='F'
    WHERE generation_high>=12
    ORDER BY area.id");
$sth->execute();
my (%lookup, %ons_code_to_old_id, %unit_id_to_old_id);
while (my @row = $sth->fetchrow_array) {
    push @{$lookup{$row[6]}{$row[0]}{$row[1]}{$row[2]}}, $row[3];
    $ons_code_to_old_id{$row[4]} = $row[3] if $row[4];
    $unit_id_to_old_id{$row[5]} = $row[3] if $row[5];
}
$mapit_old->disconnect();

$sth = $mapit_new->prepare("SELECT country, areas_area.type, name, areas_area.id, ac1.code, ac2.code, generation_high_id
    FROM areas_area
        LEFT JOIN areas_code AS ac1 ON areas_area.id=ac1.area_id AND ac1.type='ons'
        LEFT JOIN areas_code AS ac2 ON areas_area.id=ac2.area_id AND ac2.type='unit_id'
    WHERE generation_high_id>=12
    ORDER BY areas_area.id");
$sth->execute();
my (%old_to_new, %new_to_old);
while (my @row = $sth->fetchrow_array) {
    next if $row[4] && $row[4] =~ /^95[A-Z]\d\d$/; # NI wards not in old mapit
    # Firstly, anything with an ONS code
    if ($row[4] && $ons_code_to_old_id{$row[4]}) {
        my $old_id = $ons_code_to_old_id{$row[4]};
        delete $ons_code_to_old_id{$row[4]};
        $old_to_new{$old_id} = $row[3];
        $new_to_old{$row[3]} = $old_id;
    } elsif ($row[4]) {
        # Ran once with this not commented - it's just new CPCs that are in new mapit only
        # print "$row[0] $row[1] $row[2] $row[3] is in new, not in old\n";
    } elsif ($row[1] ne 'CED' && $lookup{$row[6]}{$row[0]}{$row[1]}{$row[2]} && @{$lookup{$row[6]}{$row[0]}{$row[1]}{$row[2]}}) {
        # Things without ONS codes, do by unique name (except CED): EUR GLA LAC SPC SPE WAC WAE WMC
        die "Name should be unique!" if @{$lookup{$row[6]}{$row[0]}{$row[1]}{$row[2]}} > 1;
        my $old_id = $lookup{$row[6]}{$row[0]}{$row[1]}{$row[2]}[0];
        delete $lookup{$row[6]}{$row[0]}{$row[1]}{$row[2]};
        $old_to_new{$old_id} = $row[3];
        $new_to_old{$row[3]} = $old_id;
    } elsif ($row[1] eq 'CED' && $unit_id_to_old_id{$row[5]} && $lookup{$row[6]}{$row[0]}{$row[1]}{$row[2]} && @{$lookup{$row[6]}{$row[0]}{$row[1]}{$row[2]}}) {
        # CED, do by Unit ID and possibly non-unique name
        my $old_id = $unit_id_to_old_id{$row[5]};
        my $other_old_id;
        foreach (@{$lookup{$row[6]}{$row[0]}{$row[1]}{$row[2]}}) {
            $other_old_id = $_ if $_ == $old_id;
        }
        die "Could not find matching old ID" unless $other_old_id;
        delete $unit_id_to_old_id{$row[5]};
        $old_to_new{$old_id} = $row[3];
        $new_to_old{$row[3]} = $old_id;
    } else {
        # This only happens for two Scottish WMCs that have changed unit ID for some reason
        print "CANNOT FIND $row[0] $row[1] $row[2] $row[3] in old\n";
    }
}

# Okay, so now we have the mapping, let's do it!
# First, change all the IDs, but add 100,000 so no clashes.
my $update = [
    $mapit_new->prepare('UPDATE areas_area SET id=? WHERE id=?'),
    $mapit_new->prepare('UPDATE areas_area SET parent_area_id=? WHERE parent_area_id=?'),
    $mapit_new->prepare('UPDATE areas_geometry SET area_id=? WHERE area_id=?'),
    $mapit_new->prepare('UPDATE areas_name SET area_id=? WHERE area_id=?'),
    $mapit_new->prepare('UPDATE areas_code SET area_id=? WHERE area_id=?'),
    $mapit_new->prepare('UPDATE postcodes_postcode_areas SET area_id=? WHERE area_id=?'),
];
foreach (sort { $a <=> $b } keys %new_to_old) {
    foreach my $sql (@$update) {
        $sql->execute($new_to_old{$_}+100000, $_);
    }
    print "$_\n";
}

$mapit_new->commit();
$mapit_new->disconnect();

# Now, manually move all IDs sub 100,000 to a safe area (30k - the new CPCs, 2
# S WMCs) and then manually reduce all >100,000 IDs by 100,000.

# ---

sub connect_to_mapit_database {
    my ($db, $host) = @_;
    return DBI->connect("dbi:Pg:dbname=$db;host=$host.int.ukcod.org.uk;port=5434",
        $db, c(`/data/mysociety/bin/pgpw $db`), { RaiseError => 1, AutoCommit => 0 });
}

sub c { $_ = shift; chomp; return $_; }

