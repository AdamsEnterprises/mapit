# import_norway_osm.py:
# This script is used to import information from OpenStreetMap into MaPit.
# It takes KML data generated by bin/osm_to_kml, so you should run that first.
#
# Copyright (c) 2011 UK Citizens Online Democracy. All rights reserved.
# Email: matthew@mysociety.org; WWW: http://www.mysociety.org

import re
import xml.sax
from xml.sax.handler import ContentHandler
from optparse import make_option
from django.core.management.base import LabelCommand
# Not using LayerMapping as want more control, but what it does is what this does
#from django.contrib.gis.utils import LayerMapping
from django.contrib.gis.gdal import *
from mapit.areas.models import Area, Generation
from utils import save_polygons

class Command(LabelCommand):
    help = 'Import OSM data'
    args = '<OSM KML files generated by osm_to_kml (make sure fylke KML file is first)>'
    option_list = LabelCommand.option_list + (
        make_option('--commit', action='store_true', dest='commit', help='Actually update the database'),
    )

    def handle_label(self, filename, **options):
        current_generation = Generation.objects.current()
        new_generation = Generation.objects.new()
        if not new_generation:
            raise Exception, "No new generation to be used for import!"

        print filename

        # Need to parse the KML manually to get the ExtendedData
        kml_data = KML()
        xml.sax.parse(filename, kml_data)

        ds = DataSource(filename)
        layer = ds[0]
        for feat in layer:
            name = feat['Name'].value.decode('utf-8')
            name = re.sub('\s+', ' ', name)
            print " ", name.encode('utf-8')

            code = int(kml_data.data[name]['ref'])
            country = 'O'
            if code < 100: # Not particularly nice, but fine
                area_code = 'NFY'
                parent_area = None
                code_str = '%02d' % code
            else:
                area_code = 'NKO'
                code_str = '%04d' % code
                parent_area = Area.objects.get(id=int(code_str[0:2]))
            
            try:
                m = Area.objects.get(id=code)
            except Area.DoesNotExist:
                m = Area(
                    id = code,
                    name = name,
                    type = area_code,
                    country = country,
                    parent_area = parent_area,
                    generation_low = new_generation,
                    generation_high = new_generation,
                )

            if m.generation_high and current_generation and m.generation_high.id < current_generation.id:
                raise Exception, "Area %s found, but not in current generation %s" % (m, current_generation)
            m.generation_high = new_generation

            g = feat.geom.transform(4326, clone=True)
            poly = [ g ]

            if options['commit']:
                m.save()
                for k, v in kml_data.data[name].items():
                    if k in ('name:smi', 'name:fi'):
                    	lang = 'N' + k[5:]
                    	m.names.update_or_create({ 'type': lang }, { 'name': v })
                m.codes.update_or_create({ 'type': 'n5000' }, { 'code': code_str })
                save_polygons({ code : (m, poly) })

class KML(ContentHandler):
    def __init__(self, *args, **kwargs):
        self.content = ''
        self.data = {}

    def characters(self, content):
        self.content += content

    def endElement(self, name):
        if name == 'name':
            self.current = {}
            self.data[self.content.strip()] = self.current
        elif name == 'value':
            self.current[self.name] = self.content.strip()
            self.name = None
        self.content = ''

    def startElement(self, name, attr):
        if name == 'Data':
            self.name = attr['name']

